#!/usr/bin/env python3

# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4

__author__ = 'Stephan Bechter <stephan@apogeum.at>'

import argparse
import collections
import hashlib
import logging
import math
import pprint
import re
import subprocess
import sys
import textwrap
import time
from typing import Set


COLOR_BRANCH       = 'orange'
COLOR_HEAD         = 'Gold'
COLOR_NODE         = 'cornsilk3'
COLOR_NODE_CHERRY_PICK = 'burlywood1'
COLOR_NODE_FIRST   = 'cyan'
COLOR_NODE_MERGE   = 'cornsilk'  # Was red
COLOR_NODE_REVERT  = 'azure4'
COLOR_STASH        = 'red'
COLOR_TAG          = 'yellow2'

COLOR_MASTER       = 'paleturquoise'
COLOR_ROBOTBUILDER = 'palegreen'
COLOR_TEST         = 'orchid1'


# Get only the changed lines (starting with + or -), no line numbers, hashes, ...
def getCommitDiff(hash:str):
    global git_dir_spec

    command = f'git {git_dir_spec} diff {hash}^ {hash} | grep "^[-+]"'
    logging.info('Hash Command: %s', command)
    diffOutput = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, universal_newlines=True)
    (diff, err) = diffOutput.communicate()
    return diff


def getCommitDiffHash(hash:str):
    diff = getCommitDiff(hash)
    sha = hashlib.sha1(diff.encode('utf-8'))
    return sha.hexdigest()


def graphviz_list (name:str, s:Set[str]):
    if len(s) == 0:
        return ''
    else:
        return ',{}="{}"'.format(name, ','.join(s))


def simplify_ref (refEntry:str):
    simple = refEntry
    #simple = simple.replace('HEAD -> ', '')
    if simple != 'refs/stash':
        simple = re.sub(r'^\s*[^/]+/', '', simple)
    simple = simple.strip()
    return simple


if __name__ == '__main__':
    # Groups: 1:int, 2-5:.*, 6-8:str
    pattern = re.compile(r'^\[(\d+)\|\|(.*)\|\|(.*)\|\|(.*)\|\|\s?(.*)\]\s([0-9a-f]*)\s?([0-9a-f]*)\s?([0-9a-f]*)$')
    revertMessagePattern = re.compile(r'Revert "(.*)"')

    parser = argparse.ArgumentParser()

    parser.add_argument('-C', dest='C'
                       , help='Path to dir')
    parser.add_argument('-g', '--geometry', default='1x1'
                       , help='W x H of output; specify as 2x1 for two wide, one tall')
    parser.add_argument('-l', '--landscape'
                       , help='Use landscape mode in output')
    parser.add_argument('-m', '--messages', dest='messages', action='store_true'
                       , help='Show commit messages in node')
    parser.add_argument('-r', '--range'
                       , help='git commit range')
    parser.add_argument('--show-head', action='store_true'
                       , help='Show where head is')
    parser.add_argument('--show-remote-branches', action='store_true'
                       , help='Show remote branches if they match local (remotes that do not match local are always printed)')
    parser.add_argument('--since'
                       , help='git commit date --since')

    parser.add_argument('-x', '--debug', dest='debug', action='store_true'
                       , help='Show debug messages on stderr')

    args = parser.parse_args()

    logging.basicConfig(level=logging.INFO)
    if args.debug:
        logging.getLogger().setLevel(logging.DEBUG)

    revRange = ''
    if args.range:
        revRange = args.range
        logging.info('Range: %s', revRange)

    git_dir_spec = ''
    if args.C:
        git_dir_spec = f'-C {args.C} '

    git_since_spec = ''
    if args.since:
        git_since_spec = f'--since {args.since} '

    gitLogCommand = (f'git {git_dir_spec}log {git_since_spec}'
                    + '--topo-order --pretty=format:"[%ct||%an||%ci||%s||%d] %h %p" --all '
                    + revRange
                    )
    logging.info('Git log command: %s', gitLogCommand)
    output = subprocess.Popen(gitLogCommand, shell=True, stdout=subprocess.PIPE, universal_newlines=True)
    (out, err) = output.communicate()
    lines = out.split('\n')

    hashes = {}
    dates = {}
    messages = {}
    predefinedNodeColor = {}

    w, h = 8.5, 11
    if args.landscape:
        w, h = h, w
    margin = 0.5
    match = re.match(r'^\s*(\d+)\s*x\s*(\d+)\s*$', args.geometry)
    if match:
        w = w * int(match.group(1))
        h = h * int(match.group(2))
    w = w - (2 * margin)
    h = h - (2 * margin)
    logging.info (f'width, height = {w}, {h}, margin = {margin}')

    print('digraph G {')
    print(f'    size="{w}!,{h}!" margin={margin}')

    #first extract messages and refs

    # {commit}->{simpleref}->[ref, ref, ref]
    commit_to_simpleref = { }
    # {simpleref}->set of commits
    simpleref_commits = { }

    local_ref_present = set()

    for line in lines:
        match = re.match(pattern, line)
        if match:
            date       = match.group(1)
            message    = match.group(4)
            ref        = match.group(5)
            commitHash = match.group(6)

            if message in messages:
                existing = messages[message]
                # print(dates[existing] + ' - ' + date)
                if dates[existing] > date:
                    # print(f'setting message [{message}] with [{hash}]')
                    messages[message] = commitHash
            else:
                messages[message] = commitHash

            dates[commitHash] = date
            hashes[commitHash] = True
            commit_to_simpleref[commitHash] = c_s = { }

            if ref:
                refEntries = ref.replace('(', '').replace(')', '').split(',')
                logging.info ('hash %s <- ref entries %s', commitHash, refEntries)
                for refEntry in refEntries:
                    refEntry = refEntry.strip()
                    if not args.show_head:
                        refEntry = refEntry.replace('HEAD -> ', '')
                        if refEntry == 'origin/HEAD':
                            continue

                    simple = simplify_ref(refEntry)

                    if simple == refEntry:
                        local_ref_present.add(simple)

                    sc_set = simpleref_commits.get(simple, None)
                    if sc_set is None:
                        sc_set = simpleref_commits[simple] = set()
                    sc_set.add(commitHash)

                    s_r = c_s.get(simple, None)
                    if s_r is None:
                        s_r = c_s[simple] = [ ]
                    s_r.append (refEntry)

    logging.info ('simplerefs -> commits = %s', simpleref_commits)
    commit_to_simpleref_pp = pprint.pformat(commit_to_simpleref, indent=1, width=80, depth=None)
    logging.info (f'commit -> simplerefs -> [refs] = {commit_to_simpleref_pp}')
    logging.info (f'local ref present = {local_ref_present}')

    cutoff = time.time() - (24 * 60 * 60)
    for line in lines:
        #print(line)
        match = re.match(pattern, line)
        if match:
            date = match.group(1)
            when = int(date)
            user = match.group(2)
            pdate = match.group(3)
            message = match.group(4)
            commitHash = match.group(6)
            parentHash1 = match.group(7)
            parentHash2 = match.group(8)

            link1 = '' 
            link2 = ''
            labelExt = '' 
            nodeMessage = '' 
            nodeShape = 'box'
            nodeStyle = set()
            nodeStyle.add('filled')

            stashed = False

            for simple, refs in commit_to_simpleref[commitHash].items():
                logging.info ("Refs for %s: simple '%s', refs %s", commitHash, simple, str(refs))
                print_all_refs = args.show_remote_branches

                commits_for_this_simple_ref = simpleref_commits[simple]
                if len(commits_for_this_simple_ref) > 1:
                    # the various local/remotes for this branch are on multiple commits
                    logging.info ('branch %s shows up on multiple commits, printing all refs', simple)
                    print_all_refs = True

                # No local refs, so we print the remote ones.
                if not simple in local_ref_present:
                    print_all_refs = True

                ref_fillcolor = COLOR_BRANCH
                ref_linecolor = 'black'
                ref_shape = 'oval'
                for refEntry in refs:
                    if 'test' in refEntry:
                        ref_fillcolor = COLOR_TEST
                    elif 'master' in refEntry:
                        ref_fillcolor = COLOR_MASTER

                    if 'HEAD -> ' in refEntry:
                        ref_fillcolor = COLOR_HEAD
                    elif 'tag' in refEntry:
                        refEntry = refEntry.replace('tag: ', '')
                        ref_fillcolor = COLOR_TAG
                    elif 'stash' in refEntry:
                        ref_fillcolor = COLOR_STASH
                        stashed = True
                        if getCommitDiff(parentHash1) == '':
                            predefinedNodeColor[parentHash1] = COLOR_STASH
                        elif getCommitDiff(parentHash2) == '':
                            predefinedNodeColor[parentHash2] = COLOR_STASH
                        continue

                label_refs = refs
                if not print_all_refs:
                    label_refs = []
                    for ref in refs:
                        if 'refs/stash' in ref or '/' not in ref:
                            label_refs.append(ref)

                # Use label_refs even if empty. The resulting empty bubble is a sign of a code bug.
                refLabel = '\\n'.join(label_refs)
                style = f'shape={ref_shape},fillcolor={ref_fillcolor}'
                print(f'    "{refEntry}"[label="{refLabel}",style=filled,{style}]; "{refEntry}" -> "{commitHash}" [style=dotted];')

            if when > cutoff:
                nodeStyle.add('bold')

            if args.messages:
                nodeMessage = '\n' + message.replace('"', "'");

            if commitHash in predefinedNodeColor:
                labelExt = '\\nSTASH INDEX'
                nodeColor = predefinedNodeColor[commitHash]
            else:
                nodeColor=COLOR_NODE

            if parentHash1:
                if parentHash1 in hashes:
                    link1 = f' "{commitHash}"->"{parentHash1}" [dir=back];'
            else:
                #initial commit
                nodeColor = COLOR_NODE_FIRST

            if parentHash2:
                if parentHash2 in hashes:
                    link2 = f' "{commitHash}"->"{parentHash2}" [dir=back];'

            if parentHash1 and parentHash2:
                nodeColor = COLOR_NODE_MERGE
                #nodeShape = 'box3d'
                nodeStyle.add('diagonals')

            if message in messages:
                # message exists in history - possible cherry-pick -> compare diff hashes
                existingHash = messages[message]
                if commitHash is not existingHash and date > dates[existingHash]:
                    diffHashOld = getCommitDiffHash(existingHash)
                    diffHashActual = getCommitDiffHash(commitHash)
                    logging.info('M [%s, %s, %s]', message, diffHashOld, diffHashActual)
                    if diffHashOld == diffHashActual:
                        logging.info('diffHashes are equal: cherry pick %s -> %s', existingHash, commitHash)
                        # print('    " + str(existingHash) + '"->"' + commitHash + '"[dir=back,label="Cherry\\nPick",style=dotted,fontcolor="red",color="red"]')
                        print(f'    "{str(existingHash)}"->"{commitHash}"[label="Cherry\\nPick",style=dotted,fontcolor="red",color="red"]')
                        nodeColor = COLOR_NODE_CHERRY_PICK
                        # labelExt = '\\nCherry Pick'
            logging.info('Message: [%s]', message)
            if message.startswith("Revert"):
                # check for revert
                logging.info('Revert commit')
                match = re.match(revertMessagePattern, message)
                if match:
                    originalMessage = match.group(1)
                    logging.info("Revert match [%s]", originalMessage)
                    origRevertHashStr = str(messages[originalMessage])
                    print(f'    "{commitHash}"->"{origRevertHashStr}"[label="Revert",style=dotted,fontcolor="azure4",color="azure4"]')
                nodeColor = COLOR_NODE_REVERT

            if stashed:
                nodeColor = COLOR_STASH
                labelExt = '\\nSTASH'

            nodeInfo = ''

            numberOfLines = math.floor(len(nodeMessage) / 60) + 1
            lineLength = round(len(nodeMessage) / numberOfLines)
            chunks = textwrap.wrap(nodeMessage, lineLength + 6)
            nm2 = ''
            for line in chunks:
              nm2 += '\\n'
              line = line.replace('\\', '\\\\')
              nm2 += line
            pdate = re.sub(r'^(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}).*$', r'\1', pdate)
            style_spec = graphviz_list('style', nodeStyle)
            attrs = f'shape={nodeShape}{style_spec},fillcolor={nodeColor}'
            print(f'    "{commitHash}"[label="{user} {pdate} ({commitHash}){nm2}{labelExt}",{attrs}];' 
                 + link1 + link2
                 )

    print('}')
